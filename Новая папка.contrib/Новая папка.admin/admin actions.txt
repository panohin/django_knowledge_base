https://docs.djangoproject.com/en/4.1/ref/contrib/admin/actions/


Admin actions - функции, котьорые можно применять к списку объектов в админ панели.


Actions - обычные функции, принимающие три аргумента: текущую ModelAdmin, request, queryset (со списком объектов для экшена:))

def make_published(modeladmin, request, queryset):
    queryset.update(status='p')

или for obj in queryset:
    do_something_with(obj),
если нельзя сделать update (https://docs.djangoproject.com/en/4.1/topics/db/queries/#topics-db-queries-update).


Необходимо передать [список] экшенов в аттрибуте actions в нужной ModelAdmin.
from django.contrib import admin
from myapp.models import Article

@admin.action(description='Mark selected stories as published') # указываемое человекочитаемое имя. По дефолту 'make published'
def make_published(modeladmin, request, queryset):
    queryset.update(status='p')

class ArticleAdmin(admin.ModelAdmin):
    list_display = ['title', 'status']
    ordering = ['title']
    actions = [make_published]

admin.site.register(Article, ArticleAdmin)


Если action плотно привязан к определенной ModelAdmin, то можно добавить action как метод класса ModelAdmin:

class ArticleAdmin(admin.ModelAdmin):
	...
    actions = ['make_published']
	...
    @admin.action(description='Mark selected stories as published')
    def make_published(self, request, queryset):
        queryset.update(status='p')
Обратим внимание, что в аттрибут actions уже передаётся 'строка' с названием функции, а первый аргумент метода - self.
Action как метод позволяет составлять более понятное сообщение self.message_user().


Actions that provide intermediate pages



