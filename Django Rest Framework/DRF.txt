https://www.django-rest-framework.org/

Django REST Framework мощный и гибкий инструмент для создания веб-API.


Установка.

pip install djangorestframework
pip install markdown # поддержка markdown для API в браузерах
pip install django-filter # поддержка фильтрации
или
git clone https://github.com/encode/django-rest-framework

Добавляем
'rest_framework',
в INSTALLED_APPS

Если хотим использовать API в браузере (?) и реализовать авторизацию, то необходимо в urls.py добавить:
urlpatterns = [
	...
	path('api-auth/', include('rest_framework.urls')),
]
'api-auth/' может быть каким угодно.


Пример. API для чтения/записи данных о пользователях проекта.

Все глобальные настройки REST framework API хранятся в одном настраиваемом словаре {dict} REST_FRAMEWORK. Сперва необходимо добавить его в settings.py:
REST_FRAMEWORK = {
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly'
    ]
}

urls.py:

from django.urls import path, include
from django.contrib.auth.models import User
from rest_framework import routers, serializers, viewsets

# Serializers define the API representation.
class UserSerializer(serializers.HyperlinkedModelSerializer):
    class Meta:
        model = User
        fields = ['url', 'username', 'email', 'is_staff']

# ViewSets define the view behavior.
class UserViewSet(viewsets.ModelViewSet):
    queryset = User.objects.all()
    serializer_class = UserSerializer

# Routers provide an easy way of automatically determining the URL conf.
router = routers.DefaultRouter()
router.register(r'users', UserViewSet)

# Wire up our API using automatic URL routing.
# Additionally, we include login URLs for the browsable API.
urlpatterns = [
    path('', include(router.urls)),
    path('api-auth/', include('rest_framework.urls', namespace='rest_framework'))
]