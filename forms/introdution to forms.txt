https://docs.djangoproject.com/en/4.1/topics/forms/


Формы HTML


Формы HTML должны указывать две вещи:
- куда? URL, на который должны быть направлены данные пользовательского ввода
- как? метод HTTP - GET or POST

GET и POST - единственные методы, используемые в формах Джанго.

GET используется только для запросов, не влияющих на состояние системы. Не подходит для паролей, больших файлов, для форм администратора. Подходит для поисковых запросов.
POST для внесения изменений.


Класс Джанго Form

Также, как поля класса модели связаны с полями базы данных, поля класса формы связаны с HTML элементами <input>. Поля формы являются классами сами по себе. Они управляют данными формы и проводят валидацию при отправке. В браузере поле формы показывается "виджетом". У каждого типа поля есть соответствующий класс виджета, который можно и переопределить.


Создание, обработка и отображение форм

Если экземляр модели мы запрашиваем из базы данных, то, имея дело с формами, мы создаём их в представлениях.
Template:
В <form action="" method=""> action указываем url, а в method -- 'post' или 'get'.

Пример простой формы в шаблоне:
<form action="/your-name/" method="post">
    {% csrf_token %}
    <label for="your_name">Your name: </label>
    <input id="your_name" type="text" name="your_name" value="{{ current_name }}">
    <input type="submit" value="OK">
</form>

Экземпляр класса forms.Form имеет метод is_valid(), запускающий валидацию для всех полей формы. В случае успешной проверки возвращает True и размещает данные из формы в аттрибут cleaned_data.

Пример объявления forms.Form:
from django import forms

class NameForm(forms.Form):
    your_name = forms.CharField(label='Your name', max_length=100)
Обратить внимание, что данная форма не формирует тэги <form> и кнопку submit.


Связанные и несвязанные формы (bound and inbound)
- несвязанные формы не имеют данных, связанных с ней. При отображении они пустые или со значениями по умолчанию;
- связанная форма имеет данные и позволяет проверить их (is_valid()). Если данные невалидные - можно активировать встроенные сообщения об ошибках, которые необходимо исправить пользователю.
- атрибут экземпляра класса Form is.bound позволит узнать привязана форма или нет.



Виджеты.
Каждое поле формы имеет соответствующий класс Виджета.
https://docs.djangoproject.com/en/4.1/ref/forms/widgets/


Данные.

После того, как данные отправлены в форму, и is_valid() возвращает True, данные помещаются в словарь form.cleaned_data.
Можно, конечно, воспользоваться данными из request.POST, но словарь cleaned_data лучше.("потому что потому")

from django.core.mail import send_mail

if form.is_valid():
    subject = form.cleaned_data['subject']
    message = form.cleaned_data['message']
    sender = form.cleaned_data['sender']
    cc_myself = form.cleaned_data['cc_myself']

    recipients = ['info@example.com']
    if cc_myself:
        recipients.append(sender)

    send_mail(subject, message, sender, recipients)
    return HttpResponseRedirect('/thanks/')

Файлы, загруженные с помощью формы, нужно получать из request.FILES.
https://docs.djangoproject.com/en/4.1/ref/forms/api/#binding-uploaded-files


Работа с формами в шаблонах templates.

Передавая в шаблон template {{ form }}, Джанго отобразит <label> и <input> формы. Тэг <form> и submit нужно указать самому.


Переиспользуемые шаблоны форм.(не понял!)
Суть в том, что можно использовать один шаблон temlplate для разных подобных форм.


Возможности отображения форм.

Для отображения <label>,<input>  можно использовать:
- {{ form.as_div }}
- {{ form.as_table }} <table> указываем сами
- {{ form.as_p }}
- {{ form.as_ul }} <ul> указываем сами

Как формы подставляются в html:
https://docs.djangoproject.com/en/4.1/ref/forms/api/#ref-forms-api-outputting-html

Отрисовка полей формы вручную.
К каждому полю формы в шаблоне template можно обратиться по {{ form.name_of_field }}.

{{ form.non_field_errors }}
<div class="fieldWrapper">
    {{ form.subject.errors }}
    <label for="{{ form.subject.id_for_label }}">Email subject:</label>
    {{ form.subject }}
</div>


Перебор полей формы.

Если для всех полей формы применяем один html код, то можем использовать цикл {% for %}:

{% for field in form %}
    <div class="fieldWrapper">
        {{ field.errors }}
        {{ field.label_tag }} {{ field }}
        {% if field.help_text %}
        <p class="help">{{ field.help_text|safe }}</p>
        {% endif %}
    </div>
{% endfor %}

Полезные атрибуты поля {{ field }}:
- {{ field.errors }}
Отдаёт <ul class="errorlist"> содержащий все ошибки, связанные с этим полем. Можно самому настроить вывод ошибок с помощью {% for error in field.errors %}. В этом случае каждый объект перебора будет строкой 'string', содержащей текст ошибки.
- {{ field.field }}
Экземпляр Field из класса формы. С помощью него можно получить доступ к атрибутам Field, напр., {{ char_field.field.max_length }}.
- {{ field.help_text }}
Любой текст справки
- {{ field.html_name }}
Имя поля, которое будет использоваться в поле имени элемента ввода. При этом учитывается префикс формы, если он был установлен
- {{ field.id_for_label }}
Идентификатор, который будет использован для этого поля. Если создаём метку вручную, то можно использовать её вместо label_tag. Это также полезно, когда хотим избежать хардкода в поле ID JavaScript.
- {{ field.is_hidden }}
Возвращает True, если поле спрятано hidden
- {{ field.label }}
- {{ field.label_tag }}
label поля, указанный в html <label> тэг
- {{ field.legend_tag }}
То же, что и label_tag, но для виджетов с несколькими входными данными, заключенными в <fieldset>
- {{ field.use_fieldset }}
Возвращает True, если виджет поля формы содержит несколько входных данных, которые должны быть сгруппированы в <fieldset> с <legend>. Напр.,
{% if field.use_fieldset %}
  <fieldset>
  {% if field.label %}{{ field.legend_tag }}{% endif %}
{% else %}
  {% if field.label %}{{ field.label_tag }}{% endif %}
{% endif %}
{{ field }}
{% if field.use_fieldset %}</fieldset>{% endif %}
- {{ field.value }}

Перебор в цикле hidden и visible полей
Джанго предоставляет возможность перебирать отдельно form.hidden_fields или form.visible_fields.
